.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.SH "Prerequisites"
Zipnish runs on top of Varnish, currently \- the Varnish supported version is 4\. Data storage is based on MySQL, therefore a running instance of MySQL server will be required\.
.
.P
Following pip packages are required \- simplemysql \- mysql\-python \- mysql\-connector\-python \- crochet (twisted included) \- flask \- flask\-sqlalchemy \- flask\-script
.
.SH "Required Configuration"
.
.P
A MySQL database is required for both the LogReader and UI components\. Its main purpose is to store specific data fetched from Varnishlog\. Install an instance of a MySQL server and create a user along with a database for it\.
.
.P
\fIExample:\fR \fBsql CREATE USER \'microservice\'@\'localhost\' IDENTIFIED BY \'PassWord\'; CREATE DATABASE microservice; GRANT ALL PRIVILEGES ON microservice\.* TO \'microservice\'@\'localhost\';\fR
.
.P
The LogReader component has a set of several required settings in order to be it fully functional\. By default, these settings will be found either under:
.
.P
A brief description for each of these settings is given in the config file\.
.
.P
Zipnish is bundled with an UI which will generate graphs displaying how each of the microservice requests have performed\. A few settings are required here as well, the UI needs to point to the same MySQL database as the LogReader, as they will share the same data\. The following are required as environment variables: \fIDB_HOST\fR, \fIDB_PORT\fR, \fIDB_USER\fR, \fIDB_PASS\fR, \fIDB_NAME\fR\.
.
.P
\fIExample:\fR
.
.IP "" 4
.
.nf

$ export DB_HOST=localhost
$ export DB_USER=microservice
$ export DB_PASS=PassWord
$ export DB_NAME=microservice
.
.fi
.
.IP "" 0
.
.SH "How does Zipnish become aware of the existing microservices?"
In order to have your Microservices integrated in the Zipnish environment, a few changes are required on both parties: Varnish and the Microservices\.
.
.IP "\(bu" 4
All your Microservice nodes need to be declared as backends in the vcl configuration\.
.
.IP "\(bu" 4
The vcl_recv() needs to return a pass\.
.
.IP "" 0
.
.P
\fIExample:\fR
.
.IP "" 4
.
.nf

    vcl 4\.0;

    backend DemoMicroservice {
        \.host = "127\.0\.0\.1";
        \.port = "9999";
    }

    sub vcl_recv {
        return (pass);
    }
.
.fi
.
.IP "" 0
.
.IP "\(bu" 4
On the application side, a couple of http headers are required to be added on the requests\.
.
.IP "\(bu" 4
Headers: \fIX\-Varnish\-Trace\fR, \fIX\-Varnish\-Parent\fR
.
.IP "\(bu" 4
Since all requests go through Varnish, they will further be picked up by Varnishlog while LogReader fetches its own data from Varnishlog\.
.
.IP "\(bu" 4
The main purpose of these headers is to establish the hierarchy among requests\.
.
.IP "" 0
.
.P
An example on how to set these headers can be found under:
.
.P
A very naive web\-server, used for testing, adds these headers while handling GET requests\. It is of a similar manner that your application should add these headers as well\.
.
.SH "Run the LogReader"
When running from the source code, the LogReader is started by running the \fIapp\.py\fR script located under:
.
.P
\fIExample:\fR \fBsh $ cd zipnish/log\-reader $ python app\.py\fR
.
.P
Otherwise, if installed from its package, LogReader can be started as a service:
.
.P
\fIExample:\fR \fBsh $ sudo service log\-reader start\fR
.
.SH "Run the UI"
When running from the source code, the UI will run on your local machine on port \fI5000\fR, unless otherwise specified\. Before running it, make sure that its configuration points to the correct MySQL setup\.
.
.P
\fIExample:\fR \fBsh $ python manage\.py runserver\fR
.
.P
If installed from its package, the UI is also available as a service:
.
.P
\fIExample:\fR \fBsh $ sudo service zipnish\-ui start\fR
.
.SH "Zipnish tests"
Currently there are only a few tests available that will validate log data parsing, storage and request timings\. The test does not expose any config file, thus the configuration for the MySQL database needs to be done in the \fIlog_test\.py\fR file\.
.
.P
While running, a few requests will be issued against Varnish, Varnishlog will generate log data related to these requests\. The LogReader will fetch the Varnishlog data, parse it and extract strictly data that itâ€™s interesting for it self\. Stored data and their timings will be compared against random timings which are known in before\-hand\.
